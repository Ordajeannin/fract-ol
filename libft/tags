!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/mnt/nfs/homes/ajeannin/clean/fractol/libft/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(NAME)	Makefile	/^$(NAME) 		: $(OBJ)$/;"	t
$(OBJF)	Makefile	/^$(OBJF)			:$/;"	t
$(OBJ_DIR)%.o	Makefile	/^$(OBJ_DIR)%.o 		: $(SRC_DIR)%.c | $(OBJF)$/;"	t
BUFFER_SIZE	includes/libft.h	/^#  define BUFFER_SIZE /;"	d
CC	Makefile	/^CC			= gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS 			= -Werror -Wextra -Wall -I$/;"	m
INCLUDES	Makefile	/^INCLUDES		= includes$/;"	m
LIBFT_H	includes/libft.h	/^# define LIBFT_H$/;"	d
NAME	Makefile	/^NAME 			= libft.a $/;"	m
OBJ	Makefile	/^OBJ			= $(addprefix $(OBJ_DIR), $(addsuffix .o, $(SRC_FILES)))$/;"	m
OBJF	Makefile	/^OBJF			= .cache_exists$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR			= obj\/$/;"	m
SRC	Makefile	/^SRC			= $(addprefix $(SRC_DIR), $(addsuffix .c, $(SRC_FILES)))$/;"	m
SRC_DIR	Makefile	/^SRC_DIR			= src\/$/;"	m
SRC_FILES	Makefile	/^SRC_FILES 		= ft_atoi			\\$/;"	m
all	Makefile	/^all 			: $(NAME)$/;"	t
clean	Makefile	/^clean 			: $/;"	t
content	includes/libft.h	/^	void			*content;$/;"	m	struct:s_list	typeref:typename:void *
count_words	src/ft_split.c	/^static	int	count_words(const char *str, char c)$/;"	f	typeref:typename:int	file:
fclean	Makefile	/^fclean 			: clean$/;"	t
ft_atoi	src/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f	typeref:typename:int
ft_bzero	src/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void
ft_calloc	src/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f	typeref:typename:void *
ft_char_in_set	src/ft_strtrim.c	/^static	int	ft_char_in_set(char c, char const *set)$/;"	f	typeref:typename:int	file:
ft_formats	src/ft_printf.c	/^int	ft_formats(va_list args, const char conv)$/;"	f	typeref:typename:int
ft_get_line	src/get_next_line_bonus.c	/^char	*ft_get_line(char *stash)$/;"	f	typeref:typename:char *
ft_is_newline	src/get_next_line_utils_bonus.c	/^char	*ft_is_newline(char *str)$/;"	f	typeref:typename:char *
ft_isalnum	src/ft_isalnum.c	/^int	ft_isalnum(int a)$/;"	f	typeref:typename:int
ft_isalpha	src/ft_isalpha.c	/^int	ft_isalpha(int a)$/;"	f	typeref:typename:int
ft_isascii	src/ft_isascii.c	/^int	ft_isascii(int a)$/;"	f	typeref:typename:int
ft_isdigit	src/ft_isdigit.c	/^int	ft_isdigit(int a)$/;"	f	typeref:typename:int
ft_isprint	src/ft_isprint.c	/^int	ft_isprint(int a)$/;"	f	typeref:typename:int
ft_itoa	src/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_len	src/ft_itoa.c	/^static	int	ft_len(int n)$/;"	f	typeref:typename:int	file:
ft_lstadd_back	src/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstadd_front	src/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstclear	src/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void*))$/;"	f	typeref:typename:void
ft_lstdelone	src/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f	typeref:typename:void
ft_lstiter	src/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void*))$/;"	f	typeref:typename:void
ft_lstlast	src/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstmap	src/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f	typeref:typename:t_list *
ft_lstnew	src/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	src/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f	typeref:typename:int
ft_memchr	src/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	src/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f	typeref:typename:int
ft_memcpy	src/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memmove	src/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memset	src/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_minitoa	src/ft_itoa.c	/^static	char	*ft_minitoa(int n)$/;"	f	typeref:typename:char *	file:
ft_nbr_len	src/ft_print_unsigned.c	/^int	ft_nbr_len(unsigned int nbr)$/;"	f	typeref:typename:int
ft_print_char	src/ft_printf.c	/^int	ft_print_char(int c)$/;"	f	typeref:typename:int
ft_print_hexa	src/ft_print_hexa.c	/^int	ft_print_hexa(unsigned long int nbr, const char conv)$/;"	f	typeref:typename:int
ft_print_nbr	src/ft_print_str_nbr.c	/^int	ft_print_nbr(int n)$/;"	f	typeref:typename:int
ft_print_percent	src/ft_print_percent.c	/^int	ft_print_percent(void)$/;"	f	typeref:typename:int
ft_print_ptr	src/ft_print_ptr.c	/^int	ft_print_ptr(unsigned long int ptr)$/;"	f	typeref:typename:int
ft_print_str	src/ft_print_str_nbr.c	/^int	ft_print_str(char *str)$/;"	f	typeref:typename:int
ft_print_unsigned	src/ft_print_unsigned.c	/^int	ft_print_unsigned(unsigned int n)$/;"	f	typeref:typename:int
ft_printf	src/ft_printf.c	/^int	ft_printf(const char *str, ...)$/;"	f	typeref:typename:int
ft_put_in_hexa	src/ft_print_hexa.c	/^int	ft_put_in_hexa(unsigned long int nbr, char *hexa)$/;"	f	typeref:typename:int
ft_putchar_fd	src/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl_fd	src/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putnbr_fd	src/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putstr_fd	src/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_read	src/get_next_line_bonus.c	/^char	*ft_read(int fd, char *stash)$/;"	f	typeref:typename:char *
ft_reput_ptrvalue_in_hexa	src/ft_print_ptr.c	/^int	ft_reput_ptrvalue_in_hexa(unsigned long int nbr)$/;"	f	typeref:typename:int
ft_split	src/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_strchr	src/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strdup	src/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f	typeref:typename:char *
ft_striteri	src/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *d))$/;"	f	typeref:typename:void
ft_strjoin	src/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strjoin2	src/get_next_line_utils_bonus.c	/^char	*ft_strjoin2(char *stash, char *buffer)$/;"	f	typeref:typename:char *
ft_strlcat	src/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlcpy	src/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlen	src/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f	typeref:typename:size_t
ft_strlen2	src/get_next_line_utils_bonus.c	/^int	ft_strlen2(char *str)$/;"	f	typeref:typename:int
ft_strmapi	src/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	src/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strnstr	src/ft_strnstr.c	/^char	*ft_strnstr(const char *ocean, const char *pearl, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	src/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strtrim	src/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_substr	src/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	src/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	src/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
ft_uitoa	src/ft_print_unsigned.c	/^char	*ft_uitoa(unsigned int n)$/;"	f	typeref:typename:char *
ft_update_stash	src/get_next_line_bonus.c	/^char	*ft_update_stash(char *stash)$/;"	f	typeref:typename:char *
ft_write_number	src/ft_itoa.c	/^static	char	*ft_write_number(int len, int n, char *a)$/;"	f	typeref:typename:char *	file:
get_next_line	src/get_next_line_bonus.c	/^char	*get_next_line(int fd)$/;"	f	typeref:typename:char *
helpsplit	src/ft_split.c	/^static	char	**helpsplit(int index, char const *s, char c)$/;"	f	typeref:typename:char **	file:
next	includes/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list *
re	Makefile	/^re			: fclean all$/;"	t
s_list	includes/libft.h	/^typedef struct s_list$/;"	s
t_list	includes/libft.h	/^}			t_list;$/;"	t	typeref:struct:s_list
word_dup	src/ft_split.c	/^static	char	*word_dup(const char *str, int start, int finish)$/;"	f	typeref:typename:char *	file:
